# # Resolve react_native_pods.rb with node to allow for hoisting
# require Pod::Executable.execute_command('node', ['-p',
#   'require.resolve(
#     "react-native/scripts/react_native_pods.rb",
#     {paths: [process.argv[1]]},
#   )', __dir__]).strip
# require_relative '../node_modules/react-native-permissions/scripts/setup'


# platform :ios, '13.4'
# prepare_react_native_project!

# setup_permissions([
#   # 'AppTrackingTransparency',
#   # 'Bluetooth',
#   # 'Calendars',
#   # 'CalendarsWriteOnly',
#    'Camera',
#   # 'Contacts',
#   # 'FaceID',
#   # 'LocationAccuracy',
#   # 'LocationAlways',
#   # 'LocationWhenInUse',
#   # 'MediaLibrary',
#   # 'Microphone',
#   # 'Motion',
#   # 'Notifications',
#   # 'PhotoLibrary',
#   # 'PhotoLibraryAddOnly',
#   # 'Reminders',
#   # 'Siri',
#   # 'SpeechRecognition',
#   # 'StoreKit',
# ])

# # If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# # because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
# #
# # To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# # ```js
# # module.exports = {
# #   dependencies: {
# #     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# # ```
# # flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

# linkage = ENV['USE_FRAMEWORKS']
# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

# target 'XRPHWallet' do
#   config = use_native_modules!
#   use_frameworks! :linkage => :static
#   $RNFirebaseAsStaticFramework = true


#   use_react_native!(
#     :path => config[:reactNativePath],
    
#     # An absolute path to your application root.
#     :app_path => "#{Pod::Config.instance.installation_root}/.."
#   )

#   target 'XRPHWalletTests' do
#     inherit! :complete
#     # Pods for testing
#   end

#   post_install do |installer|
#      # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
#     react_native_post_install(
#       installer,
#       # Set `mac_catalyst_enabled` to `true` in order to apply patches
#       # necessary for Mac Catalyst builds
#       config[:reactNativePath],
#       :mac_catalyst_enabled => false,
#       # :ccache_enabled => true
#         )
        
#     # __apply_Xcode_12_5_M1_post_install_workaround(installer)
  
#     installer.pods_project.targets.each do |target|
#       target.build_configurations.each do |config|
#         config.build_settings["GCC_WARN_INHIBIT_ALL_WARNINGS"] = "YES"
#         config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
#       end
#     end
#       installer.pods_project.targets.each do |target|
#         if target.name == 'BoringSSL-GRPC'
#           target.source_build_phase.files.each do |file|
#             if file.settings && file.settings['COMPILER_FLAGS']
#               flags = file.settings['COMPILER_FLAGS'].split
#               flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
#               file.settings['COMPILER_FLAGS'] = flags.join(' ')
#             end
#           end
#         end
#       end
#     installer.pods_project.targets.each do |target|
#       target.build_configurations.each do |config|
#         config.build_settings["CC"] = "clang"
#         config.build_settings["LD"] = "clang"
#         config.build_settings["CXX"] = "clang++"
#         config.build_settings["LDPLUSPLUS"] = "clang++"
#       end
#     end
    
#     installer.aggregate_targets.each do |aggregate_target|
#       aggregate_target.user_project.native_targets.each do |target|
#         target.build_configurations.each do |config|
#           config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
#           config.build_settings['EXCLUDED_ARCHS'] = 'i386'
#         end
#       end
#       aggregate_target.user_project.save
#     end
#     installer.pods_project.targets.each do |target|
#       if (target.name.eql?('FBReactNativeSpec'))
#         target.build_phases.each do |build_phase|
#           if (build_phase.respond_to?(:name) && build_phase.name.eql?('[CP-User] Generate Specs'))
#             target.build_phases.move(build_phase, 0)
#           end
#         end
#       end
#     end
    
#     installer.pods_project.targets.each do |target|
#       target.build_configurations.each do |config|
#         config.build_settings["ENABLE_BITCODE"] = "NO"
#       end
#     end
#   end
# end


# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip
require_relative '../node_modules/react-native-permissions/scripts/setup'

platform :ios, '13.4'
prepare_react_native_project!

setup_permissions([
  # Uncomment the required permissions
  # 'AppTrackingTransparency',
  # 'Bluetooth',
  # 'Calendars',
  # 'CalendarsWriteOnly',
   'Camera',
  # 'Contacts',
  # 'FaceID',
  # 'LocationAccuracy',
  # 'LocationAlways',
  # 'LocationWhenInUse',
  # 'MediaLibrary',
  # 'Microphone',
  # 'Motion',
  # 'Notifications',
  # 'PhotoLibrary',
  # 'PhotoLibraryAddOnly',
  # 'Reminders',
  # 'Siri',
  # 'SpeechRecognition',
  # 'StoreKit',
])

# Configure frameworks linkage
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'XRPHWallet' do
  config = use_native_modules!
  use_frameworks! :linkage => :static
  $RNFirebaseAsStaticFramework = true

  use_react_native!(
    :path => config[:reactNativePath],
    
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'XRPHWalletTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # React Native post-install configuration
    react_native_post_install(
      installer,
      # Set `mac_catalyst_enabled` to `true` in order to apply patches
      # necessary for Mac Catalyst builds
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    # BoringSSL-GRPC specific adjustments
    installer.pods_project.targets.each do |target|
      if target.name == 'BoringSSL-GRPC'
        target.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        end
        target.source_build_phase.files.each do |file|
          if file.settings && file.settings['COMPILER_FLAGS']
            flags = file.settings['COMPILER_FLAGS'].split
            flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
            file.settings['COMPILER_FLAGS'] = flags.join(' ')
          end
        end
      end
    end

    # Suppress warnings and set deployment target
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings["GCC_WARN_INHIBIT_ALL_WARNINGS"] = "YES"
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        config.build_settings["ENABLE_BITCODE"] = "NO"
        config.build_settings["CC"] = "clang"
        config.build_settings["LD"] = "clang"
        config.build_settings["CXX"] = "clang++"
        config.build_settings["LDPLUSPLUS"] = "clang++"
      end
    end

    # Exclude unsupported architectures
    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.user_project.native_targets.each do |target|
        target.build_configurations.each do |config|
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
          config.build_settings['EXCLUDED_ARCHS'] = 'i386'
        end
      end
      aggregate_target.user_project.save
    end

    # Adjust build phases for FBReactNativeSpec
    installer.pods_project.targets.each do |target|
      if target.name.eql?('FBReactNativeSpec')
        target.build_phases.each do |build_phase|
          if build_phase.respond_to?(:name) && build_phase.name.eql?('[CP-User] Generate Specs')
            target.build_phases.move(build_phase, 0)
          end
        end
      end
    end
  end
end
